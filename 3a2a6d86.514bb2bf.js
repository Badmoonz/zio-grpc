(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{147:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return l}));var r=n(2),a=n(9),o=(n(0),n(170)),i={title:"Context and Dependencies",sidebar_label:"Context and Dependencies"},c={id:"context",isDocsHomePage:!1,title:"Context and Dependencies",description:"When implementing a server, ZIO gRPC allows you to specify that your service",source:"@site/../zio-grpc-docs/target/mdoc/context.md",permalink:"/zio-grpc/docs/context",editUrl:"https://github.com/scalapb/zio-grpc/edit/master/foo/docs/../zio-grpc-docs/target/mdoc/context.md",sidebar_label:"Context and Dependencies",sidebar:"someSidebar",previous:{title:"Generated Code Reference",permalink:"/zio-grpc/docs/generated-code"}},s=[{value:"Context transformations",id:"context-transformations",children:[]}],p={rightToc:s};function l(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"When implementing a server, ZIO gRPC allows you to specify that your service\ndepends on an environment of type ",Object(o.b)("inlineCode",{parentName:"p"},"R")," and a context of type ",Object(o.b)("inlineCode",{parentName:"p"},"Context"),"."),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"Context")," and ",Object(o.b)("inlineCode",{parentName:"p"},"R")," can be of any Scala type, however when they are not ",Object(o.b)("inlineCode",{parentName:"p"},"Any")," they have to be wrapped in an ",Object(o.b)("inlineCode",{parentName:"p"},"Has[]"),". This allows ZIO gRPC to combine two values (",Object(o.b)("inlineCode",{parentName:"p"},"Context with R"),") when providing the values at effect execution time."),Object(o.b)("p",null,"For example, we can define a service for which the effects depend on ",Object(o.b)("inlineCode",{parentName:"p"},"Console"),", and for each request we except to get context of type ",Object(o.b)("inlineCode",{parentName:"p"},"User"),". Note that ",Object(o.b)("inlineCode",{parentName:"p"},"Console")," is a type-alias to ",Object(o.b)("inlineCode",{parentName:"p"},"Has[Console.Service]")," so there is no need wrap it once more in an ",Object(o.b)("inlineCode",{parentName:"p"},"Has"),"."),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-scala"}),'import zio.{Has, ZIO}\nimport zio.console._\nimport scalapb.zio_grpc.RequestContext\nimport myexample.testservice.ZioTestservice.ZSimpleService\nimport myexample.testservice.{Request, Response}\nimport io.grpc.Status\n\ncase class User(name: String)\n\nobject MyService extends ZSimpleService[Console, Has[User]] {\n  def sayHello(req: Request): ZIO[Console with Has[User], Status, Response] =\n    for {\n      user <- ZIO.service[User]\n      _ <- putStrLn("I am here!")\n    } yield Response(s"Hello, ${user.name}")\n}\n')),Object(o.b)("p",null,"As you can see above, we can access both the ",Object(o.b)("inlineCode",{parentName:"p"},"User")," and the ",Object(o.b)("inlineCode",{parentName:"p"},"Console")," in our effects. If one of the methods does not need to access the dependencies or context, the returned type from the method can be cleaned up to reflect that certain things are not needed."),Object(o.b)("h2",{id:"context-transformations"},"Context transformations"),Object(o.b)("p",null,"In order to be able to bind our service to a gRPC server, we need to have the\nservice's Context type to be one of the supported types:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Has[scalapb.zio_grpc.RequestContext]")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Has[scalapb.zio_grpc.SafeMetadata]")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("inlineCode",{parentName:"li"},"Any"))),Object(o.b)("p",null,"The service ",Object(o.b)("inlineCode",{parentName:"p"},"MyService")," as defined above expects ",Object(o.b)("inlineCode",{parentName:"p"},"Has[User]")," as a context. In order to be able to bind it, we will transform it into a service that depends on a context of type ",Object(o.b)("inlineCode",{parentName:"p"},"Has[RequestContext]"),". To do this, we need to provide the function to produce a ",Object(o.b)("inlineCode",{parentName:"p"},"User")," out of a ",Object(o.b)("inlineCode",{parentName:"p"},"RequestContext"),". This way, when a request comes in, ZIO gRPC can take the ",Object(o.b)("inlineCode",{parentName:"p"},"RequestContext")," (which is request metadata such as headers and options), and use our function to construct a ",Object(o.b)("inlineCode",{parentName:"p"},"User")," and provide it into the environment of our original service."),Object(o.b)("p",null,"In many typical cases, we may need to retrieve the user from a database, and thus we are using an effectful function ",Object(o.b)("inlineCode",{parentName:"p"},"RequestContext => IO[Status, User]")," to find the user."),Object(o.b)("p",null,"For example, we can provide a function that returns an effect that always succeeds:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-scala"}),'val fixedUserService =\n  MyService.transformContextM((rc: RequestContext) => ZIO.succeed(User("foo")))\n// fixedUserService: ZSimpleService[Console, Has[RequestContext]] = myexample.testservice.ZioTestservice$ZSimpleService$$anon$5$$anon$6@4d1c2194\n')),Object(o.b)("p",null,"and we got our service, which still depends on an environment of type ",Object(o.b)("inlineCode",{parentName:"p"},"Console"),", however the context is now ",Object(o.b)("inlineCode",{parentName:"p"},"Has[RequestContext]")," so it can be bound to a gRPC server."),Object(o.b)("p",null,"Here is how we would extract a user from a metadata header:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-scala"}),'import zio.IO\nimport scalapb.zio_grpc.{ServiceList, ServerMain}\n\nval UserKey = io.grpc.Metadata.Key.of(\n  "user-key", io.grpc.Metadata.ASCII_STRING_MARSHALLER)\n// UserKey: io.grpc.Metadata.Key[String] = Key{name=\'user-key\'}\n\ndef findUser(rc: RequestContext): IO[Status, User] =\n  rc.metadata.get(UserKey).flatMap {\n    case Some(name) => IO.succeed(User(name))\n    case _          => IO.fail(Status.UNAUTHENTICATED.withDescription("No access!"))\n  }\n\nval rcService =\n  MyService.transformContextM(findUser)\n// rcService: ZSimpleService[Console, Has[RequestContext]] = myexample.testservice.ZioTestservice$ZSimpleService$$anon$5$$anon$6@37ab3530\n\nobject MyServer extends ServerMain {\n  def services = ServiceList.add(rcService)\n}\n')))}l.isMDXComponent=!0},170:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),l=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=l(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},u=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),u=r,m=d["".concat(i,".").concat(u)]||d[u]||b[u]||o;return n?a.a.createElement(m,c(c({ref:t},p),{},{components:n})):a.a.createElement(m,c({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"}}]);